---@class Transposer : ComponentProxy
---@field transferFluid fun(sourceSide:number,sinkSide:number,count:number):boolean,number Transfer some fluids between two fluid handlers (pipes or tanks, etc). `sourceSide` is the side pulled from and `sinkSide` is the side transferred to. The side value is a integral value representing the cardinal directions (east, west, south, north), up, and down. The `sides` library has these values for convenience. `count` is the number of millibuckets to transfers. Returns true and the number of millibuckets transfered on success, or false and an error message on failure.
---@field store fun(side:number,slot:number,dbAddress:string,dbSlot:number):boolean Store an item stack description in the specified slot of the database with the specified address.
---@field compareStackToDatabase fun(side:number,slot:number,dbAddress:string,dbSlot:number,checkNBT:boolean):boolean Compare an item in the specified slot in the inventory on the specified side with one in the database with the specified address.
---@field getSlotStackSize fun(side:number,slot:number):number Get number of items in the specified slot of the inventory on the specified side of the device.
---@field getSlotMaxStackSize fun(side:number,slot:number):number Get the maximum number of items in the specified slot of the inventory on the specified side of the device.
---@field getInventoryName fun(side:number):string Get the the name of the inventory on the specified side of the device.
---@field getInventorySize fun(side:number):number Get the number of slots in the inventory on the specified side of the device.
---@field getFluidInTank fun(side:number,tank:number):TankDescription Get a description of the fluid in the the specified tank on the specified side.
---@field getTankLevel fun(side:number,tank:number):number Get the amount of fluid in the specified tank on the specified side.
---@field transferItem fun(sourceSide:number,sinkSide:number,count:number,sourceSlot:number,sinkSlot:number):number Transfer some items between two inventories.
---@field compareStacks fun(side:number,slotA:number,slotB:number,checkNBT:boolean):boolean Get whether the items in the two specified slots of the inventory on the specified side of the device are of the same type.
---@field areStacksEquivalent fun(side:number,slotA:number,slotB:number):boolean Get whether the items in the two specified slots of the inventory on the specified side of the device are equivalent (have shared OreDictionary IDs).
---@field getTankCount fun(side:number):number Get the number of tanks available on the specified side.
---@field getStackInSlot fun(side:number,slot:number):ItemStack Get a description of the stack in the inventory on the specified side of the device.
---@field getTankCapacity fun(side:number,tank:number):number Get the capacity of the specified tank on the specified side.
---@field getAllStacks fun(side:number):userdata Get a description of all stacks in the inventory on the specified side of the device.<br/>--The return value is callable. Calling it will return a table describing the stack in the inventory or nothing if the iterator reaches end.<br/>--The return value provides the followings callbacks:<br/>--`getAll():table`<br/>--Returns ALL the stack in the this.array. Memory intensive.<br/>--`count():number`<br/>--Returns the number of elements in the this.array.<br/>--`reset()`<br/>--Reset the iterator index so that the next call will return the first element.
local transposer = require("component").transposer

---@class StackIterator
---@field __call fun():ItemStack
---@field getAll fun():ItemStack[] Returns ALL the stack in the this.array. Memory intensive.
---@field count fun():number Returns the number of elements in the this.array.
---@field reset fun() Reset the iterator index so that the next call will return the first element.