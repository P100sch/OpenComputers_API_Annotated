---@class Modem : ComponentProxy This component is provided by [network cards](https://ocdoc.cil.li/item:network_card "item:network_card"). Wireless network cards behave much like normal network cards, but additionally send the message as a wireless "packet" when a strength is set. The modem's address must be used for networking. It can be found through component.modem.address.
---@field isWireless fun():boolean Returns whether this modem is capable of sending wireless messages.
---@field maxPacketSize fun():number Returns the maximum packet size for sending messages via network cards. Defaults to 8192. You can change this in the OpenComputers configuration file. <br/>Every value in a message adds two bytes of overhead. (Even if there's only one value.) <br/>Numbers add another 8 bytes, true/false/nil another 4 bytes, and strings exactly as many bytes as the string contains---though empty strings still count as one byte. <br/>Examples: <br/>-   `"foo"` is a 5-byte packet; two bytes of overhead and a three byte string. <br/>-   `"currentStatus",300` is a 25-byte packet; four bytes overhead, a 13-byte string, and 8 bytes for a number.
---@field isOpen fun(port:number):boolean Opens the specified port number for listening. Returns `true` if the port was opened, `false` if it was already open. **Note: maximum port is 65535**
---@field open fun(port:number):boolean Opens the specified port number for listening. Returns true if the port was opened, false if it was already open. Note: maximum port is 65535
---@field close fun(port:number):boolean Opens the specified port number for listening. Returns true if the port was opened, false if it was already open. Note: maximum port is 65535
---@field send fun(address:string,port:number,...:nil|boolean|number|string):boolean Sends a network message to the specified address. Returns `true` if the message was sent. This does *not* mean the message was received, only that it was sent. No port-sniffing for you. <br/>Any additional arguments are passed along as data. These arguments must be basic types: nil, boolean, number and string values are supported, tables and functions are not. See [the serialization API](https://ocdoc.cil.li/api:serialization "api:serialization") for serialization of tables. <br/>The number of additional arguments is limited. The default limit is 8. It can be changed in the OpenComputers configuration file, but this is *not* recommended; higher limits can allow relatively weak computers to break relatively strong ones with no defense possible, while lower limits will prevent some protocols from working.
---@field broadcast fun(port:number,...:nil|boolean|number|string):boolean Sends a broadcast message. This message is delivered to all reachable network cards. Returns `true` if the message was sent. Note that broadcast messages are *not* delivered to the modem that sent the message. <br/>All additional arguments are passed along as data. See `send`.
---@field getStrength fun():number The current signal strength to apply when sending messages. Wireless network cards only.
---@field setStrength fun(strength:number):number Sets the signal strength. If this is set to a value larger than zero, sending a message will also generate a wireless message. The higher the signal strength the more energy is required to send messages, though. Wireless network cards only.
---@field getWakeMessage fun():string Gets the current wake-up message. When the network card detects the wake message (a string in the first argument of a network packet), on any port and the machine is off, the machine is started. Works for robots, cases, servers, drones, and tablets. [Linked Cards](https://ocdoc.cil.li/component:tunnel "component:tunnel") provide this same functionality.
---@field setWakeMessage fun(message:string,fuzzy:boolean):string Sets the wake-up message to the specified **string**. The message matching can be fuzzy (default is false). A fuzzy match ignores additional trailing arguments in the network packet.
local modem = require("component").modem