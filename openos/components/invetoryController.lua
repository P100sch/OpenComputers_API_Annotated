---@class InventoryController : ComponentProxy This component is provided by the [inventory controller upgrade](https://ocdoc.cil.li/item:inventory_controller_upgrade "item:inventory_controller_upgrade"). <br/>With this API the robot can receive additional information about items or inventories and is able to put items into and take them from specific slots. <br/>Sides required for most operations are specified in the [Sides API](https://ocdoc.cil.li/api:sides "api:sides"). If no or an invalid side is provided functions will usually throw an error. To interact with the robot's own inventory you need to use the side `back`, which however makes it impossible to interact with inventories behind the robot. Robots cannot access their left or right sides. You can interact with external inventories in front of, above, or below the robot.
---@field getInventorySize fun(side:number):number|nil,string Returns the size of the inventory at the specified side. **side** - must be a valid side. <br/>**Returns:** the size of the inventory, or `nil` followed by a description why this function failed (usually `no inventory`).
---@field getStackInSlot fun(side:number,slot:number):ItemStack Returns a table describing the item in the specified slot or nil. Deprecated for getting info about robot's own inventory, see `getStackInInternalSlot`. <br/>**side** - must be a valid side. <br/>**slot** - the slot to analyze. This does not check the inventory size and will consider slots outside the inventory bounds to be empty. <br/>**Returns:** `nil` if the slot was empty (or outside the inventory's bounds), a table otherwise with the following information about the item in that slot
---@field getStackInInternalSlot fun(side:number,slot:number):ItemStack Gets Itemstack description of item in specified or selected slot (if no input provided) of robot inventory.
---@field dropIntoSlot fun(side:number,slot:number,count:number):boolean,string Puts up to count items from the currently selected slot into the specified slot of the inventory at the specified side. <br/>**side** - a valid side. <br/>**slot** - the slot to drop the item into. <br/>**count** - how many items to transfer. <br/>**Returns:** `true` if at least one item was moved, `false` and a secondary result that describes the error otherwise. <br/>Note that the robot cannot drop items into it's own inventory, attempting to do so will cause this to throw an error. You need to use `robot.transferTo` from the [Robot API](https://ocdoc.cil.li/api:robot "api:robot") to do so.
---@field suckFromSlot fun(side:number,slot:number,count:number):boolean Takes up to count items from the specified slot of the inventory at the specified side and puts them into the currently selected slot. <br/>**side** - a valid side. <br/>**slot** - the slot to take the item from. <br/>**count** - how many items to transfer. <br/>**Returns:** `true` if at least one item was moved, `false` otherwise. <br/>If the currently selected slot is occupied, then the items will be stacked with similar items in the robot's inventory or moved to the next free slot if available. If no slot is available this operation will fail. <br/>Note that the robot cannot suck items from it's own inventory, attempting to do so will cause this to throw an error. You need to use `robot.transferTo` from the [Robot API](https://ocdoc.cil.li/api:robot "api:robot") to do so.
---@field equip fun():boolean Swaps the content of the robot's tool slot with the content of the currently selected inventory slot. <br/>Returns: true if the items were swapped, false otherwise. This operation usually succeeds. <br/>Note that you can put any kind of item into the robot's tool slot, not only tools, even items that the robot cannot use at all.
---@field store fun(side:number,slot:number,dbAddress:string,dbSlot:number):boolean Stores the Itemstack description of the item from the specified slot in an inventory on the specified side, into a specified database slot with the specified address.
---@field storeInternal fun(side:number,slot:number,dbAddress:string,dbSlot:number):boolean Stores Itemstack description of item in specified robot inventory slot into specified database slot with the specified database address.
---@field compareToDatabase fun(slot:number,dbAddress:string,dbSlot:number):boolean Compare Itemstack description in specified slot with one in specified slot of a database with specified address. Returns **true** if items match.
---@field compareStacks fun(side:number,slotA:number,slotB:number):boolean Checks to see if Itemstack descriptions in specified slotA and slotB of inventory on specified side match. Returns **true** if identical.
---@field getSlotMaxSize fun(side:number,slot:number):number Gets maximum number of items in specified slot in inventory on the specified side.
---@field getSlotStackSize fun(side:number,slot:number):number Gets number of items in specified slot in inventory on the specified side.
local inventory_controller = require("component").inventory_controller

---@class ItemStack Returned by inventory_controller methods.
---@field damage number the current damage value of the item.
---@field maxDamage number the maximum damage this item can have before it breaks.
---@field size number the current stack size of the item.
---@field maxSize number the maximum stack size of this item.
---@field id number the Minecraft id of the item. Note that this field is only included if `insertIdsInConverters=true` in the configs, and can vary between servers!
---@field name string the **untranslated** item name, which is an internal Minecraft value like `oc:item.FloppyDisk`
---@field label string the translated item name.
---@field hasTag boolean whether or not the item has an NBT tag associated with it.