---@class GPU : ComponentProxy This is the component provided by [graphics cards](https://ocdoc.cil.li/item:graphics_card "item:graphics_card"). For simple programs the [term API](https://ocdoc.cil.li/api:term "api:term") will usually all you need. For more complex operations, or to get a bit more performance, you may wish to interact with the GPU directly, though.<br/><br/>As of OC 1.3 screens of tier 2 and 3 have a 16 color palette. The palette is used to determine the exact colors used when displaying an RGB color.<br/><br/>For tier two this palette contains all colors the screen can possibly display, and is initialized to the standard Minecraft colors. As a side-effect you can specify the colors using `gpu.setBackground(colors.red, true)`, for example. Keep in mind **this only works on tier two screens**. Tier three also has an editable 16 color palette, and also a 240 color fixed palette. The editable palette is initialized to grayscale values. The remaining 240 colors are stored as truncated RGB values as was the case in older versions of OpenComputers.
---@field bind fun(address:string,reset:boolean):boolean,string Tries to bind the GPU to a screen with the specified address. Returns `true` on success, `false` and an error message on failure. Resets the screen's settings if reset is 'true'. A GPU can only be bound to one screen at a time. All operations on it will work on the bound screen. If you wish to control multiple screens at once, you'll need to put more than one graphics card into your computer.
---@field getScreen fun():string Get the address of the screen the GPU is bound to. Since 1.3.2.
---@field getBackground fun():number,boolean Gets the current background color. This background color is applied to all “pixels” that get changed by other operations.<br/><br/>Note that the returned number is either an RGB value in hexadecimal format, i.e. `0xRRGGBB`, or a palette index. The second returned value indicates which of the two it is (`true` for palette color, `false` for RGB value).
---@field setBackground fun(color:number,isPaletteIndex:boolean):number,number|nil Sets the background color to apply to "pixels" modified by other operations from now on. The returned value is the old background color, as the actual value it was set to (i.e. not compressed to the color space currently set). The first value is the previous color as an RGB value. If the color was from the palette, the second value will be the index in the palette. Otherwise it will be `nil`. Note that the color is expected to be specified in hexadecimal RGB format, i.e. `0xRRGGBB`. This is to allow uniform color operations regardless of the color depth supported by the screen and GPU.
---@field getForeground fun():number,boolean Like `getBackground`, but for the foreground color.
---@field setForeground fun(color:number,isPaletteIndex:boolean):number,number|nil Like `getBackground`, but for the foreground color.
---@field getPaletteColor fun(index:number):number Gets the RGB value of the color in the palette at the specified index.
---@field setPaletteColor fun(index:number,value: number):number Sets the RGB value of the color in the palette at the specified index.
---@field maxDepth fun():number Gets the maximum supported color depth supported by the GPU and the screen it is bound to (minimum of the two).
---@field getDepth fun():number The currently set color depth of the GPU/screen, in bits. Can be 1, 4 or 8.
---@field setDepth fun(bit:number):boolean Sets the color depth to use. Can be up to the maximum supported color depth. If a larger or invalid value is provided it will throw an error. Returns `true` if the depth was set, `false` otherwise.
---@field maxResolution fun():number,number Gets the maximum resolution supported by the GPU and the screen it is bound to (minimum of the two).
---@field getResolution fun():number,number Gets the currently set resolution.
---@field setResolution fun(width:number,height:number):boolean Sets the specified resolution. Can be up to the maximum supported resolution. If a larger or invalid resolution is provided it will throw an error. Returns `true` if the resolution was changed (may return `false` if an attempt was made to set it to the same value it was set before), `false` otherwise.
---@field getViewport fun():number,number Get the current viewport resolution.
---@field setViewport fun(width:number,height:number):boolean Set the current viewport resolution. Returns `true` if it was changed (may return `false` if an attempt was made to set it to the same value it was set before), `false` otherwise. This makes it look like screen resolution is lower, but the actual resolution stays the same. Characters outside top-left corner of specified size are just hidden, and are intended for rendering or storing things off-screen and copying them to the visible area when needed. Changing resolution will change viewport to whole screen.
---@field get fun(x:number,y:number):string,number,number,number|nil,number|nil Gets the character currently being displayed at the specified coordinates. The second and third returned values are the fore- and background color, as hexvalues. If the colors are from the palette, the fourth and fifth values specify the palette index of the color, otherwise they are nil.
---@field set fun(x:number,y:number,value:string,vertical:boolean):boolean Writes a string to the screen, starting at the specified coordinates. The string will be copied to the screen's buffer directly, in a single row. This means even if the specified string contains line breaks, these will just be printed as special characters, the string will not be displayed over multiple lines. Returns `true` if the string was set to the buffer, `false` otherwise.<br/>The optional fourth argument makes the specified text get printed vertically instead, if `true`.
---@field copy fun(x:number,y:number,width:number,height:number,tx:number,ty:number):boolean Copies a portion of the screens buffer to another location. The source rectangle is specified by the `x`, `y`, `width` and `height` parameters. The target rectangle is defined by `x + tx`, `y + ty`, `width` and `height`. Returns `true` on success, `false` otherwise.
---@field fill fun(x:number,y:number,width:number,height:number,char:string):boolean Fills a rectangle in the screen buffer with the specified character. The target rectangle is specified by the `x` and `y` coordinates and the rectangle's `width` and `height`. The fill character `char` must be a string of length one, i.e. a single character. Returns `true` on success, `false` otherwise.<br/>Note that filling screens with spaces () is usually less expensive, i.e. consumes less energy, because it is considered a "clear" operation (see config).
---@field getActiveBuffer fun():number Returns the index of the currently selected buffer. 0 is reserved for the screen, and may return 0 even when there is no screen
---@field setActiveBuffer fun(index:number):number Sets the active buffer to `index`. 0 is reserved for the screen and can be set even when there is no screen. Returns nil for an invalid index (0 is valid even with no screen)
---@field buffers fun():number[] Returns an array of all current page indexes (0 is not included in this list, that is reserved for the screen).
---@field allocateBuffer fun(width:number,height:number):number Allocates a new buffer with dimensions width*heigh (gpu max resolution by default). Returns the index of this new buffer or error when there is not enough video memory. A buffer can be allocated even when there is no screen bound to this gpu. Index 0 is always reserved for the screen and thus the lowest possible index of an allocated buffer is always 1.
---@field freeBuffer fun(index: number):boolean Removes buffer at `index` (default: current buffer index). Returns true if the buffer was removed. When you remove the currently selected buffer, the gpu automatically switches back to index 0 (reserved for a screen)
---@field freeAllBuffers fun() Removes all buffers, freeing all video memory. The buffer index is always 0 after this call.
---@field totalMemory fun():number Returns the total memory size of the gpu vram. This does not include the screen.
---@field freeMemory fun():number Returns the total free memory not allocated to buffers. This does not include the screen.
---@field getBufferSize fun(index: number):number,number Returns the buffer size at `index` (default: current buffer index). Returns the screen resolution for index 0. Returns nil for invalid indexes
---@field bitblt fun(dst:number,col:number,row:number,width:number,height:number,src:number,fromCol:number,fromRow:number) Copy a region from buffer to buffer, screen to buffer, or buffer to screen. Defaults:<br/><br/>-   dst = 0, the screen<br/><br/>-   col, row = 1,1<br/><br/>-   width, height = resolution of the destination buffer<br/><br/>-   src = the current buffer<br/><br/>-   fromCol, fromRow = 1,1 bitblt should preform very fast on repeated use. If the buffer is dirty there is an initial higher cost to sync the buffer with the destination object. If you have a large number of updates to make with frequent bitblts, consider making multiple and smaller buffers. If you plan to use a static buffer (one with few or no updatse), then a large buffer is just fine. Returns true on success
local gpu = require("component").gpu