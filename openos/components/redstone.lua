---@class Redstone : ComponentProxy The tier one Redstone Card only supports vanilla redstone functionality (single-line analog redstone). Tier two provides interoperation with other mods' redstone systems (bundled, wireless). For bundled input/output we currently only support ProjectRed for Minecraft 1.12. In older versions we supported: RedLogic, Project Red (with Version 1.1), MineFactory Reloaded. For wireless redstone, the following mods are supported: WR-CBE, SlimeVoid's WR.<br/><br/>Note that for mods such as ProjectRed, low values (such as the vanilla maximum of 15) may not function as expected for simple on/off values (opening a door for example), because they have a larger value range. You may need to use a higher value, such as 255.
---@field getInput fun(side:number):number Returns current incoming (non-bundled) redstone values. `getInput(side)` returns the redstone level from the specified [side](https://ocdoc.cil.li/api:sides "api:sides").<br/>If you use mods such as RedLogic the input may exceed the vanilla values of [0, 15].
---@field getInput fun():table Returns current incoming (non-bundled) redstone values. `getInput()` returns a table of redstone levels from all sides.<br/><br/>Note that the table returned is zero based. That is because the keys of the table are the ordinal values of the sides, and `sides.bottom` is 0.<br/>Note also that the side is relative to the computer's orientation, i.e. `sides.south` is *in front of the computer*, not south in the world. Likewise, `sides.left` is to the left of the computer, so when you look at the computer's front, it'll be to your right.<br/>If you use mods such as RedLogic the input may exceed the vanilla values of [0, 15].
---@field getOutput fun(side:number):number Gets the currently set output on the specified side
---@field getOutput fun():table Gets the currently set output of all sides
---@field setOutput fun(side:number,value:number):number Sets the strength of the redstone signal to emit. Returns the **old** value. This can be an arbitrarily large number for mods that support this. This method takes a [side](https://ocdoc.cil.li/api:sides "api:sides") and the redstone strength to apply to just that side.
---@field setOutput fun(values:table):table Sets the strength of the redstone signal to emit. Returns the **old** values. `setOutput(values)` allows you to set the redstone strength of all sides (or a subset of sides) in a single call.
---@field getBundledInput fun(side:number,color:number):number Like `getInput`, but for bundled input, reading the value for the channel with the specified [API/Colors](https://ocdoc.cil.li/api:colors "api:colors").<br/>*As of OC 1.3: only available on a tier two redstone card.*<br/><br/>`getBundledInput(side, color)` returns the strength of the incoming redstone value on the specified side on the specified color channel.
---@field getBundledInput fun(side:number):table Like `getInput`, but for bundled input, reading the value for the channel with the specified [API/Colors](https://ocdoc.cil.li/api:colors "api:colors").<br/>*As of OC 1.3: only available on a tier two redstone card.*<br/><br/>`getBundledInput(side)` returns a table (Map[Int, Int] structure) of redstone values on the specified side in a bundled pack, indexed by color.
---@field getBundledInput fun():table Like `getInput`, but for bundled input, reading the value for the channel with the specified [API/Colors](https://ocdoc.cil.li/api:colors "api:colors").<br/>*As of OC 1.3: only available on a tier two redstone card.*<br/><br/>`getBundledInput()` returns all redstone values, of all sides and all colors. It is a Map[Int, Map[Int, Int]] structure. The top level keys are in [0, 5] range, values of [sides](https://ocdoc.cil.li/api:sides "api:sides") (keep in mind sides.bottom is zero). The child map of each side is the same data structure returned by `getBundledInput(side)`.
---@field getBundledOutput fun(side:number,color:number):number Like `getOutput`, but for bundled output, getting the values previously set that the device is emitting.<br/>*As of OC 1.3: only available on a tier two redstone card.*
---@field getBundledOutput fun(side:number):table Like `getOutput`, but for bundled output, getting the values previously set that the device is emitting.<br/>*As of OC 1.3: only available on a tier two redstone card.*
---@field getBundledOutput fun():table Like `getOutput`, but for bundled output, getting the values previously set that the device is emitting.<br/>*As of OC 1.3: only available on a tier two redstone card.*
---@field setBundledOutput fun(side:number,color:number,value:number):number Like `setOutput`, but for bundled output, setting the value for the channel with the specified [API/Colors](https://ocdoc.cil.li/api:colors "api:colors"). Returns the previous values set. `setBundledOutput(side, values)` sets a pack of color-indexed redstone values, [0, 15]. `colors.white` is zero. The values table doesn't have to be contiguous, and values omitted are left unchanged. `setBundledOutput(values)` allows you to set redstone levels for any side and any color in a single api call.<br/>*As of OC 1.3: only available on a tier two redstone card.*
---@field getComparatorInput fun(side:number):number Get the comparator input on the specified side.
---@field getWirelessInput fun():number Get the wireless redstone input.<br/>*Added in OC 1.3. Only available on tier two redstone cards.*
---@field getWirelessOutput fun():boolean Get the wireless redstone output. <br/>*Added in OC 1.3. Only available on tier two redstone cards.*
---@field setWirelessOutput fun(value:boolean):boolean Set the wireless redstone output.<br/>*Added in OC 1.3. Only available on tier two redstone cards.*
---@field getWirelessFrequency fun():number Get the currently set wireless redstone frequency.<br/>*Added in OC 1.3. Only available on tier two redstone cards.*
---@field setWirelessFrequency fun(frequency:number):number Set the wireless redstone frequency to use.<br/>*Added in OC 1.3. Only available on tier two redstone cards.*
---@field getWakeThreshold fun():number Gets the current wake-up threshold.
---@field setWakeThreshold fun(threshold:number):number Sets the wake-up threshold to the specified number.
local redstone = require("component").redstone